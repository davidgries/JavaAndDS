<TITLE>Output of thrown Exceptions and Errors</TITLE><c><b>Output of thrown Exceptions and Errors</b></c><p><! index="exception, output from">Sometimes,  your program does something that it shouldn't do, like use too much memory, or divide by <java>0</java>, or try to read from a non-existing file. These events are called <DFN>exception</DFN index=0>s. When such a thing happens, we say that an &quot;exception is thrown&quot;. In Java, these exceptions generally fall into two categories: <java>Error</java>s and <java>Exception</java>s.<<P>Throwing an <java>Error</java> causes immediate termination of the program. Throwing an <java>Exception</java> may or may not cause termination, depending on whether your program has been written to &quot;handle&quot; the <java>Exception</java>. <P>In this Lesson, we investigate <java>Error</java>s and <java>Exception</java>s and show how your program can handle <java>Exception</java>s. <P><B>Throwing-an-Exception output</B><P>An <java>Exception</java> is a runtime error that the program itself can handle in some fashion (if it is designed to do so). For example, if an attempt is made to read an integer value from the Java console and the user typed a few letters instead, the program could print a message to that effect and ask the user again to type an integer. Let's look at the output of a program that terminates by throwing an <java>Exception</java>. <P><IMG SRC=throwexpo EXPO=EXintro.exp TIME=7><H1>Throwing-an-Exception output</H1><H2>See how to interpret the output of a program that is terminated by an <java>Exception</java>.</H2>Everyone should participate in this Activity, even those who don't want to know how to handle <java>Exception</java>s!<P0>Termination of a program by throwing an <java>Exception</java> usually results in the &quot;call stack&quot; being printed in the Java console. This is a list of the methods that have been called but whose bodies are still being executed, in the reverse order in which they were called. This call stack can be helpful in finding out where and why the <java>Exception</java> occurred.<P1><hr><B>Throwing-an-Error output</B><P>Throwing an <java>Error</java> causes immediate termination of a program. There is no chance for the program to handle it in some fashion. Here are examples of <java>Error</java>s that you may see: <P><blockquote><java>OutOfMemoryError</java><br><java>Internal Error</java><br><java>Unknown Error</java></blockquote><P>In the first case, you have to find our why your program used too much memory. In the other two cases, which should rarely occur, it's difficult to say what to do. Something caused things to become really messed up. Perhaps recompiling all files or rebuilding the application may help. <P>The message that is printed for a thrown <java>Error</java> is similar to that for a thrown <java>Exception</java>. The message contains the name of the thrown <java>Error</java> and the call stackat the time it was thrown.<P>