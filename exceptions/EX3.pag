<TITLE>Catching a thrown exception</TITLE><c><b>Catching a thrown exception</b></c><p>Java provides a statement, the <DFN>try-statement</DFN>, that allows your program to <DFN>catch</DFN> an exception (an object that has been thrown) and process, or &quot;handle&quot;, it in some fashion. This means that your program need not terminate when a certain exception is thrown, because your program can catch it and handle it. Here, we discuss the try-statement.<P><B>The <java>try</java> statement</B><P><! index="try-block"><! index="catch-block"><IMG SRC=try_expo EXPO=EXtry.exp TIME=6><H1>The try statement</H1><H2>See how to catch an <java>Exception</java>.</H2>You can catch it only if it is thrown!<P0>This footnote gives a summary of the try-statement, including some point that have not yet been discussed and that will be discussed later: <A>*</A NAME="XXtry1.ast">.<P1><hr>The previous use of the try-statement is not very realistic. Generally, a program segment that we write shouldn't even try to divide by a value <java>x</java> if <java>x</java> may be <java>0</java>. We now show two realistic uses of the try-statement. <P><B>Using the try-statement in JLiveWindow</B><P><IMG SRC=try2_expo EXPO=EXtry2.exp TIME=5.5><H1>Using the try-statement in JLiveWindow</H1><H2>We look at method getIntField</H2>Two different exceptions are caught and handled in this method: a subscript is out of bounds andthe field does not contain an integer.<P><B>Using the try-statement in JLiveRead</B><P><IMG SRC=try1_expo EXPO=EXtry1.exp TIME=5><H1>Using the try-statement in JLiveRead</H1><H2>We look at method <java>readLineInt</java>.</H2>The method is supposed to read an integer. If the user typed something otherthan an integer, an exception is thrown, which the method catches and handles.<P><hr><B>Propagation of a thrown object</B><P>Suppose a try-statement statement does not catch a thrown object. Who catches it? We now investigate this issue.<P><! index="propagation"><IMG SRC=prop_expo EXPO=EXpropa.exp TIME=4><H1>Propagation of a thrown object</H1><H2>Look at what happens if a thrown object is not caught by a catch-block</H2>This footnote summarizes of the propagation of a thrown object: <A>*</A NAME="XXpropa.ast">.<P><hr><b>Exercises on exceptions</b><P><IMG SRC=quiz EXPO=EXquiz1.fil TIME=5><H1>Exercises on exceptions</H1><H2>Check your progress.</H2>Click here to do some exercises.<P><hr>Here's an interesting point. You can catch ALL <java>Exception</java>s by using a catch clause of the form:<br><br><java>   catch (Exception ex) { ... }</java><br><br>You can even catch ALL throwable objects using a catch clause of the form:<br><br><java>   catch (Throwable th) { ... }</java><br> <br>Write a small program to try these things. For example, write a statement that allocates an array that will cause memory overflow and catch it. Doing this will firm up your understanding of throwing and catching objects.<! index="catching all Exceptions"><! index="catching all Throwables">  <P>  <hr><B>The <java>finally</java> clause</B><P>A try-statement can have a <java>finally clause</java>: <P><! index="finally clause"><! index="finally-block"><java>    try </java>&lt;try-block&gt;<java><br>    </java>&lt;catch clause&gt;<java><br>    ...<br>    </java>&lt;catch clause&gt;<java><br>    finally </java>&lt;finally-block&gt;<java></java><P>If a <java>finally</java> clause is present, the finally-block is executed as the last step every time the try-statement is executed, no matter how the try-statement terminates --either normally, after execution of a catch-block, or by not catching a thrown object. Realistic examples of use of a finally clause are beyond the scope of this livetext. <P>This footnote gives a summary of the try-statement: <A>*</A NAME="XXtry1.ast">. <br>This footnote summarizes propagation of a thrown object: <A>*</A NAME="XXpropa.ast">.<P>