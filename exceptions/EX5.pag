<TITLE>Checked exceptions and the throws clause</TITLE><c><b>Checked exceptions and the throws clause</b></c><p><! index="checked"><! index="unchecked"><b>Checking that thrown objects are caught</b><P>A Java compiler checks to make sure that certain thrown objects are caught by your program; if they are not caught, the compiler issues an error message and refuses to compile the program. For example, consider this method <java>main</java>: <P><java>   public static void main(String[] args) {<br>      throw new Exception();<br>   }</java><P>(This method is useless --except to illustrate our point.) Upon attempting to compile this method, the compiler issues this error message: <P><java>   </java>Error: Exception java.lang.Exception must be caught or<br><java>   </java>it must be declared in the throws clause of this method.<P>You can get rid of this message by using a try-statement that catches the thrown object (again, this is a useless program except to illustrate our point): <P><java>   public static void main(String[]) {<br>      try {<br>          throw new Exception();<br>      } catch {Exception ex) {<br>          ...<br>      }<br>   }</java><P><b>Checked and unchecked objects</b><P>Checking that thrown objects are caught is a good idea, for it forces the programmer to think carefully about how thrown objects should be handled. But the Java compiler does not check ALL thrown objects in this manner. It checks all of them EXCEPT: <P><ol><li>Thrown objects of class <java>Error</java> and its subclasses<li>Thrown objects of class <java>RuntimeException</java> and its subclasses</ol><P><! index="RuntimeException" PROPER=1>This footnote gives an explanation of why these thrown objects are not checked; it also give a list of most of the subclasses of class <java>RuntimeException</java>: <A>*</A NAME="XXcheck.ast">.<P><b>The throws clause</b><P>A method might not WANT to catch a thrown object. In fact, it might throw an exception for the calling method to catch, because of an error in the arguments of the call. To do this, put a <DFN>throws clause</DFN> on the method. The throws clause indicates that the method throws a particular class of objects and forces the caller to catch them. <P><IMG SRC=expo EXPO=EXthrows.exp TIME=3><H1>The throws clause</H1><H2>See how a method can force a caller to try to catch a checked thrown object.</H2>  <P0>The throws clause has the form <br><br><java>  throws </java>&lt;class-name&gt;, ..., &lt;class-name&gt;<br><br>where each class-name is <java>Throwable</java> or one of its subclasses. Placing a throws clause on a method relieves the method of the responsibility of catching objects of the named classes and places the responsiblity on any method that calls this one.<P1>  <P>  <P>