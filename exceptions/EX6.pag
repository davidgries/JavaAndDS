<TITLE>Hints on using exceptions</TITLE><c><b>Hints on using exceptions</b></c><p><! index="exceptions, hints on using">We make a few remarks on using exceptions.<P><b>1. Don't overuse exceptions.</b> <P>Don't use exception handling to replace simple tests. Exception handling takes far more time than an equivalent simple test, but that is not the real reason for not using exception handling. The ability to throw an exception in a method is there to take care of really abnormal errors that the method itself can't be expected to handle and that should therefore be handled by the calling method (or its caller ...). <P><b>2. Use exceptions when the method in which an abnormal event occurs is not the best place to handle it.</b><P>For example, if you are writing a method that processes a sequence of characters of a particular form and a sequence is given that does not have the form, the error is the callers, and the calling place is the best place to handle it. <P><b>3. Don't make try-blocks too small.</b> <P>All other things being equal, it is better to have the whole body of a method enclosed in a single try-statement with several catch clauses than to have many smaller try-statements each with one catch clause. If an abnormal event happens, quite likely you'll want the method to terminate anyway. (This is not always the case; see the methods in <java>JLiveRead</java> and <java>JLiveWindow</java> that were discussed a few lessons ago.) <P> <b>4. Don't hide exceptions.</b><P> When an error message tells you that a try-block is needed, the tendency is to write one hurriedly,like this one:<P><blockquote><java>try {<br>   some code<br>}<br>catch (...Exception ex) {}</java>></blockquote><P>Here, the catch-block does nothing, and the program just goes on as if nothing happened. You do this because you don't expect the exception to happen. But when it does, and it takes you several days to find the problem, you'll be sorry. <P>  <P>  <P>