<TITLE>The throw-statement</TITLE><b>The throw-statement</b><P>The <DFN>throw-statement</DFN> can be used to throw an object when a program detectsan error. The use of the throw-statement allows a program to react to errors thatit detectsjust the way the Java runtime system and all the predefined classes react. This allowsa certain uniformity that would not be possible otherwise. </P><IMG SRC=thro_expo EXPO=EXthros.exp TIME=4><H1>The throw-statement</H1><H2>See how to throw an <java>Exception</java>.</H2><pThis can be useful!</p><p>The throw statement has the form:</p><p><java>   throw </java>&lt;expression&gt;<java> ;</java></p><p>where the expression yields an instance of (a subclass of) <java>Throwable</java>. Itsexecution causes the instance to be thrown, as explained on the previous lesson page.</p><hr><p><B>Throwing an object while another is being handled or propagated</b></P></p>Nothing prevents a catch-block or finally-block fromthrowing another object <java>a1</java> (say) ---by mistake or otherwise---while a previously thrown object<java>a0</java> is being handled.If this happens, the previously thrown object <java>a0</java> is ignored and the newly thrownobject <java>a1</java> is propagated, as described earlier.  </p>Try this out yourself. Write a method <java>main</java> like the following andexecute it to see what happens.<P><java>public static void main(String[] pars) {<br>   try {<br>      System.out.println("try-block 0");<br>      throw new ArithmeticException("fake exception 1");<br>   }<br>   catch (ArithmeticException ae) {<br>      System.out.println("catch-block 0");<br>      System.out.println(ae);<br>      throw new ArithmeticException("fake exception 2");<br>   }<br>}</java> <P><hr><p><B>Catching and throwing an <java>Exception</java> further</B></P><IMG SRC=catch_expo EXPO=EXcathro.exp TIME=4><H1>Catching and throwing an Exception further</H1><H2>See why it may be useful to catch an <java>Exception</java> and thenthrow it on to someone else.</H2>   <P>  <P>  <P>