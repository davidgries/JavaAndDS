<TITLE>The throwable object</TITLE><c><b>The throwable object</b></c><P>Some modern programming languages, like Java, contain mechanismsfor handling abnormal cases, like an attempt to read from a non-existing fileor division by <java>0</java>. Such an abnormal case is called an <DFN>exception</DFN>. <P>The code that &quot;handles&quot; the exception may be far removed from the place where the exception occurred. A language must have a mechanism for identifying the exception. It also needs a mechanism for &quot;throwing&quot; the exception to theplace where it will be caught and handled.<P>Java does this using the concept of a <DFN>throwable object</DFN>. Let's take a look at this! <P0>A <DFN>throwable object</DFN> is an instance of class <java><DFN>Throwable</DFN></java> (or one of itssubclasses). <java>Exception</java> and <java>Error</java> are two subclasses of class <java>Throwable</java>, and each has many subclasses itself. You can define your own subclasses of <java>Throwable</java>, <java>Exception</java>, and <java>Error</java> and throw their instances. We'll study this later. <br> <br>From now on, we use the term <DFN>exception</DFN> for an object that has been thrown. <br>  <br>To obtain some of these classes so that you can study them, use menu <java>Tools</java> item <java>List Programs</java> title <java>Throwables</java>.<P1><IMG SRC=throwexpo EXPO=EXthrow.scr TIME=5><H1>Throwable objects</H1><H2>Learn what a <java>Throwable</java> object is in Java.</H2><br>Java uses the concept of a class and its subclasses in many different ways! <P>To obtain copies of the classes mentioned in this activity so that you can see what they look like, look at this footnote: <A>*</A NAME="XXclass.ast">. <P><hr>To obtain methods <java>mod</java> and <java>mod2</java>, which throw an <java>IllegalArgumentException</java>, and also a template for a subclass of <java>RuntimeException</java>, look at this footnote: <A>*</A NAME="XXprogs.ast">. <P><hr><b><DFN>Exception</DFN PROPER=1>s in Java</b><P>An instance of class <java>Exception</java> is a throwable object that a program might normally catch and handle. Java has over 125 predefined <java>Exception</java>s. Here are a few that you might encounter: <P><blockquote>1. <java>ArithmeticException</java>. Probably division by <java>0</java>. <br>2. <java>ArrayIndexOutOfBoundsException</java>. In an array element reference like <jav>b[i]</java>, <java>i</java> was not a legal value.<br>3. <java>ArrayStoreException</java>. An attempt to assign a value of the wrong type to an array variable. <br>4. <java>ClassCastExeption</java>. A attempt was made to cast an object to a wrong subclass.<br>5. <java>NullPointerExeption</java>. A attempt was made to use a variable that didn't contain the name of an object.</blockquote><P>This footnote contains a list of over 125 <java>Exceptions</java>, for those who are curious about just what can go wrong: <A>*</A NAME="XXexcept.ast">.<P><hr><b><DFN>Error</DFN PROPER=1>s in Java</b><P>An instance of class <java>Error</java> is a throwable object that a program is not expected to handle; instead, it should cause immediate termination of the program. A program CAN handle it, but it is advisable not to. The reason is that the error that caused the object to be thrown was so severe that one doesn't know what further execution of the program may do. <P>Java has about 25 predefined <java>Error</java>s. Here are three that you might encounter: <P><blockquote>1. <java>OutOfMemoryError</java>. <br>2. <java>IllegalAccessError</java>.<br>3. <java>StackOverflowError</java>.</blockquote><P>This footnote contains a list of about 25 <java>Error</java>s: <A>*</A NAME="XXerror.ast">.<P>  <P>